%% https://saasrari.github.io/DE_Coastal_Site/models_xbeach.html

function build_site()
% Build a simple docs website (HTML files) using only MATLAB.
% Run this file. It writes everything into ./site

clc; close all;
outDir  = fullfile(pwd,'docs');   % was 'site'
% outDir  = fullfile(pwd,'site');
assets  = fullfile(outDir,'assets');
if ~exist(outDir,'dir'), mkdir(outDir); end
if ~exist(assets,'dir'), mkdir(assets); end

% ---------- Site settings ----------
site.title      = 'Coastal Hazard Modeling';
site.org        = 'Your Research Group';
site.themeColor = '#0a2540';
site.pages = { ...
  'index','Home'; ...
  'objective','ABOUT'; ...
  'how','HOW TO USE THIS WEBSITE'; ...
  'models','BASIC MODEL INFORMATION'; ...
  'guide','USER GUIDE'; ...
  'sites','SITES'; ...
  'map','USER-INTERACTIVE MAP'; ...
  'demo','DEMONSTRATION'; ...
  'animation','ANIMATION'; ...
  'team','TEAM'; ...
  'publication','PUBLICATIONS/PRESENTATIONS'; ...
  'media','SOCIAL MEDIA'; ...
  'website','RELATED WEBSITE' ...
};


% ---------- Logo ----------
site.logo = 'logo.jpg';                 % <<< use your real filename here (logo.jpg or logo.png)
logoPath  = fullfile(assets, site.logo);

% Don't auto-generate a placeholder if you're using JPG/PNG.
% Just warn if the file is missing so you know to add it.
if ~exist(logoPath,'file')
    warning('Logo file not found: %s', logoPath);
end


% ---------- Shared CSS ----------
cssPath = fullfile(assets,'style.css');
writeCSS(cssPath, site.themeColor);

% ---------- Content (edit these) ----------
content.index = [ ...
  '<p><strong>Near-real-time modeling of total water levels and coastal change using XBeach and companion models.</strong></p>' ...
  '<p>This site shares model setup, user guides, sites, demos, and animations.</p>' ...
];

content.objective = '<p>Short project overview, goals, and scope.</p>';
content.how       = '<p>Explain navigation, search, and where to find results.</p>';

content.models = htmlList({ ...
  mklink('models_overview.html','Overview of Technology/Methodology'), ...
  mklink('models_xbeach.html','XBEACH') ...
});


content.guide = htmlList({ ...
  mklink('guide_empirical.html','EMPIRICAL MODEL USERS GUIDE'), ...
  mklink('guide_funwave.html','FUNWAVE USERS GUIDE'), ...
  mklink('guide_nearcom.html','NEARCOM USERS GUIDE'), ...
  mklink('guide_delft3d.html','DELFT3D USERS GUIDE'), ...
  mklink('guide_adcirc.html','ADCIRC USERS GUIDE'), ...
  mklink('guide_xbeach.html','XBEACH USERS GUIDE'), ...
  mklink('guide_cshore.html','CSHORE USERS GUIDE') ...
});

content.sites = htmlList({ ...
  mklink('site_delaware.html','Delaware Coast'), ...
  mklink('site_tyndall.html','Tyndall Air Force Base'), ...
  mklink('site_roi.html','Roi Namur') ...
});

content.map = [ ...
  '<p>Interactive map with example markers (edit in <code>writeLeafletMap</code>).</p>' ...
  iframe('map.html') ...
];

content.demo        = '<p>Add demo pages for each site with images, GIFs, or short videos.</p>';
content.animation   = '<p>Link to or embed model result animations (GIF/MP4).</p>';
content.team        = '<ul><li>Your Name — PI</li><li>Colleague — Modeling</li></ul>';
content.publication = '<p>List citations, DOIs, slides, posters.</p>';
content.media       = '<p>Twitter/Threads/press links.</p>';
content.website     = '<p>Related projects and resources.</p>';

% ---------- Write main pages ----------
for i = 1:size(site.pages,1)
    slug  = site.pages{i,1};
    title = site.pages{i,2};
    body  = content.(slug);  % char HTML
    writePage(outDir, assets, site, slug, title, body, site.pages);
end

% ---------- Subpages: Models ----------
writeSimplePage(outDir, assets, site, 'models_overview', ...
    'Overview of Technology/Methodology', '<p>High-level comparison of models and when to use each.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'models_empirical', ...
    'Empirical model', '<p>Describe inputs, calibration, and limitations.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'models_adcirc', ...
    'ADCIRC', '<p>Setup, meshes, boundary conditions, outputs.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'models_delft3d', ...
    'Delft3D', '<p>Coupling, sediment transport, morphology.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'models_funwave', ...
    'FUNWAVE-TVD', '<p>Nonlinear wave modeling and runup.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'models_nearcom', ...
    'NearCoM', '<p>Nearshore community model overview.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'models_xbeach', ...
    'XBEACH', '<p>Shortwave/longwave modes, parameters, morphology switches.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'models_cshore', ...
    'CSHORE', '<p>1D cross-shore processes and use cases.</p>', site.pages);

% ---------- Subpages: Guides ----------
writeSimplePage(outDir, assets, site, 'guide_empirical', ...
    'Empirical Model — User Guide', '<p>Step-by-step usage.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'guide_funwave', ...
    'FUNWAVE — User Guide', '<p>Inputs, run scripts, outputs.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'guide_nearcom', ...
    'NEARCOM — User Guide', '<p>Workflow and troubleshooting.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'guide_delft3d', ...
    'DELFT3D — User Guide', '<p>Common pitfalls and tips.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'guide_adcirc', ...
    'ADCIRC — User Guide', '<p>Best practices for storms.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'guide_xbeach', ...
    'XBEACH — User Guide', '<p>Parameter tuning, grids, validation.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'guide_cshore', ...
    'CSHORE — User Guide', '<p>Typical setups and QA/QC.</p>', site.pages);

% ---------- Site pages ----------
writeSimplePage(outDir, assets, site, 'site_delaware', ...
    'Delaware Coast', '<p>Describe locations, transects, and data sources.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'site_tyndall', ...
    'Tyndall Air Force Base', '<p>Status and notes.</p>', site.pages);
writeSimplePage(outDir, assets, site, 'site_roi', ...
    'Roi Namur', '<p>Status and notes.</p>', site.pages);

% ---------- Write Leaflet map (no toolboxes required) ----------
writeLeafletMap(outDir, assets);

fprintf('\nDone! Open: %s\n', fullfile(outDir,'index.html'));
% ===== End of main; helpers below as nested functions =====

   function writePage(outDir_, assets_, site_, slug, title, body, pages)
    html = sprintf(['<!DOCTYPE html><html lang="en"><head>' ...
      '<meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">' ...
      '<title>%s — %s</title>' ...
      '<link rel="icon" href="assets/%s">' ...        % <-- uses site_.logo
      '<link rel="stylesheet" href="assets/style.css">' ...
      '</head><body>' ...
      '<header class="site-header"><a class="brand" href="index.html">' ...
      '<img src="assets/%s" alt="Logo"><span>%s</span></a></header>' ...  % <-- uses site_.logo
      '<nav class="top-nav">%s</nav>' ...
      '<main class="container"><aside class="sidebar">%s</aside>' ...
      '<article class="content"><h1>%s</h1>%s</article></main>' ...
      '<footer class="site-footer">&copy; %d %s</footer>' ...
      '</body></html>'], ...
      title, site_.title, ...
      site_.logo, ...                 % favicon path
      site_.logo, site_.title, ...    % header logo path + site title
      topNav(pages, slug), sideNav(pages, slug), ...
      title, body, year(datetime('now')), site_.org);

    fid = fopen(fullfile(outDir_, [slug '.html']),'w');
    fwrite(fid, html);
    fclose(fid);
end


    function writeSimplePage(outDir_, assets_, site_, slug, title, paragraph, pages)
        writePage(outDir_, assets_, site_, slug, title, paragraph, pages);
    end

    function s = topNav(pages, active)
        items = cell(1, size(pages,1));
        for ii = 1:size(pages,1)
            slug  = pages{ii,1};
            label = pages{ii,2};
            if strcmp(slug, active)
                cls = ' class="active"';
            else
                cls = '';
            end
            items{ii} = sprintf('<a%s href="%s.html">%s</a>', cls, slug, label);
        end
        s = strjoin(items, '');
    end

    function s = sideNav(pages, active)
        items = cell(1, size(pages,1));
        for ii = 1:size(pages,1)
            slug  = pages{ii,1};
            label = pages{ii,2};
            if strcmp(slug, active)
                cls = ' class="active"';
            else
                cls = '';
            end
            items{ii} = sprintf('<div><a%s href="%s.html">%s</a></div>', cls, slug, label);
        end
        s = strjoin(items, '');
    end

    function writeCSS(path, themeColor)
        css = [ ...
':root{--brand ', themeColor, ';--bg:#ffffff;--text:#1f2937;--muted:#6b7280;}', ...
'body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Helvetica,Arial,sans-serif;background:var(--bg);color:var(--text)}', ...
'.site-header{display:flex;align-items:center;gap:.6rem;padding:.8rem 1rem;border-bottom:1px solid #e5e7eb}', ...
'.brand{display:flex;align-items:center;gap:.6rem;color:var(--text);text-decoration:none;font-weight:600}', ...
'.brand img{height:28px}.top-nav{display:flex;gap:.8rem;flex-wrap:wrap;padding:.5rem 1rem;border-bottom:1px solid #e5e7eb}', ...
'.top-nav a{padding:.4rem .6rem;border-radius:.5rem;text-decoration:none;color:var(--text)}', ...
'.top-nav a.active,.top-nav a:hover{background:var(--brand);color:#fff}', ...
'.container{display:grid;grid-template-columns:260px 1fr;gap:1rem;align-items:start;padding:1rem;max-width:1200px;margin:0 auto}', ...
'.sidebar{position:sticky;top:10px;border:1px solid #e5e7eb;padding:1rem;border-radius:.75rem}', ...
'.sidebar a{display:block;color:var(--text);text-decoration:none;margin:.2rem 0}', ...
'.sidebar a.active{font-weight:600}', ...
'.content{padding:1rem 1.2rem;border:1px solid #e5e7eb;border-radius:.75rem}', ...
'img.align-right{float:right;margin:0 0 1rem 1rem;max-width:40%;height:auto}', ...
'.site-footer{padding:1rem;text-align:center;color:var(--muted);border-top:1px solid #e5e7eb;margin-top:2rem}', ...
'.content h1{margin-top:.2rem}' ...
        ];
        fid = fopen(path,'w'); fwrite(fid, css); fclose(fid);
    end

    function writeLogo(path, titleText)
        svg = ['<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 40">' ...
               '<rect width="200" height="40" fill="#0a2540"/>' ...
               '<text x="10" y="26" font-family="Arial, sans-serif" font-size="14" fill="#fff">', titleText, '</text>' ...
               '</svg>'];
        fid = fopen(path,'w'); fwrite(fid, svg); fclose(fid);
    end

    function s = mklink(href, text_)
        s = ['<a href="', href, '">', text_, '</a>'];
    end

    function s = htmlList(items)
        li = cellfun(@(x) ['<li>', x, '</li>'], items, 'UniformOutput', false);
        s  = ['<ul>', strjoin(li,''), '</ul>'];
    end

    function s = iframe(src)
        s = ['<div style="border:1px solid #e5e7eb;border-radius:8px;overflow:hidden;height:520px">' ...
             '<iframe src="', src, '" style="width:100%;height:100%;border:0"></iframe></div>'];
    end

    function writeLeafletMap(outDir_, assets_)
        % Writes ./site/map.html with Leaflet (loads from CDN). Also writes a tiny GeoJSON.
        geojsonRel = fullfile('assets','sites.geojson');
        G = struct('type','FeatureCollection','features',{{ ...
            pointFeat([-76.285,36.850],'Norfolk'), ...
            pointFeat([-85.575,30.069],'Tyndall AFB'), ...
            pointFeat([167.317,9.396],'Roi Namur') ...
        }});
        jsonText = jsonencode(G);
        fid = fopen(fullfile(outDir_, geojsonRel),'w'); fwrite(fid, jsonText); fclose(fid);

        html = ['<!DOCTYPE html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">' ...
        '<title>Interactive Map</title>' ...
        '<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">' ...
        '<style>#map{height:100vh;margin:0}</style></head><body>' ...
        '<div id="map"></div>' ...
        '<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>' ...
        '<script>var map=L.map("map").setView([20,0],2);' ...
        'L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{maxZoom:19}).addTo(map);' ...
        'fetch("assets/sites.geojson").then(r=>r.json()).then(g=>{' ...
        'L.geoJSON(g,{onEachFeature:function(f,l){if(f.properties&&f.properties.name){l.bindPopup(f.properties.name);}}}).addTo(map);' ...
        '});</script></body></html>'];

        fid = fopen(fullfile(outDir_,'map.html'),'w'); fwrite(fid, html); fclose(fid);

        function F = pointFeat(lonlat, name)
            F = struct('type','Feature','geometry',struct('type','Point','coordinates',lonlat), ...
                'properties',struct('name',name));
        end
    end
end
