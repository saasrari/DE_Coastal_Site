%% https://saasrari.github.io/DE_Coastal_Site/models_xbeach.html

function build_site()
% Build a simple docs website (HTML files) using only MATLAB.
% Run this file. It writes everything into ./site

clc; close all;
outDir  = fullfile(pwd,'docs');   % was 'site'
% outDir  = fullfile(pwd,'site');
assets  = fullfile(outDir,'assets');
if ~exist(outDir,'dir'), mkdir(outDir); end
if ~exist(assets,'dir'), mkdir(assets); end

% ---------- Site settings ----------
site.title      = 'Coastal Hazard Modeling';
site.org        = 'Your Research Group';
site.themeColor = '#0a2540';
site.pages = { ...
  'index','Home'; ...
  'objective','ABOUT'; ...
  'how','HOW TO USE THIS WEBSITE'; ...
  'models','BASIC MODEL INFORMATION'; ...
  'guide','USER GUIDE'; ...
  'sites','SITES'; ...
  'map','USER-INTERACTIVE MAP'; ...
  'demo','DEMONSTRATION'; ...
  'animation','ANIMATION'; ...
  'team','TEAM'; ...
  'publication','PUBLICATIONS/PRESENTATIONS'; ...
  'media','SOCIAL MEDIA'; ...
  'website','RELATED WEBSITE' ...
};


% ---------- Logo ----------
site.logo = 'logo.jpg';                 % <<< use your real filename here (logo.jpg or logo.png)
logoPath  = fullfile(assets, site.logo);

% Don't auto-generate a placeholder if you're using JPG/PNG.
% Just warn if the file is missing so you know to add it.
if ~exist(logoPath,'file')
    warning('Logo file not found: %s', logoPath);
end


% ---------- Shared CSS ----------
cssPath = fullfile(assets,'style.css');
writeCSS(cssPath, site.themeColor);


% ---------- Content (edit these) ----------
content.index = [ ...
  '<p><strong>Near-real-time modeling of total water levels and coastal change using XBeach and companion models.</strong></p>' ...
  '<p>This site shares model setup, user guides, sites, demos, and animations.</p>' ...
];

content.objective = '<p>Short project overview, goals, and scope.</p>';
content.how       = '<p>Explain navigation, search, and where to find results.</p>';

content.models = htmlList({ ...
  mklink('models_overview.html','Overview of Technology/Methodology'), ...
  mklink('models_xbeach.html','XBEACH') ...
});


content.guide = htmlList({ ...
  mklink('guide_xbeach.html','XBEACH USERS GUIDE') ...
});


content.sites = htmlList({ ...
  mklink('site_delaware.html','Delaware Coast') ...
});


content.map = [ ...
  '<p>Interactive map with example markers (edit in <code>writeLeafletMap</code>).</p>' ...
  iframe('map.html') ...
];

content.demo        = '<p>Add demo pages for each site with images, GIFs, or short videos.</p>';
content.animation   = '<p>Link to or embed model result animations (GIF/MP4).</p>';
content.team        = '<ul><li>Your Name — PI</li><li>Colleague — Modeling</li></ul>';
content.publication = '<p>List citations, DOIs, slides, posters.</p>';
content.media       = '<p>Twitter/Threads/press links.</p>';
content.website     = '<p>Related projects and resources.</p>';


% ---------- Write main pages ----------
for i = 1:size(site.pages,1)
    slug  = site.pages{i,1};
    title = site.pages{i,2};
    body  = content.(slug);  % char HTML
    writePage(outDir, assets, site, slug, title, body, site.pages);
end


% ---------- Subpages: Models ----------
writeSimplePage(outDir, assets, site, 'models_overview', ...
    'Overview of Technology/Methodology', '<p>High-level comparison of models and when to use each.</p>', site.pages);

writeSimplePage(outDir, assets, site, 'models_xbeach', ...
    'XBEACH', '<p>Shortwave/longwave modes, parameters, morphology switches.</p>', site.pages);


% ---------- Subpages: Guides ----------
writeSimplePage(outDir, assets, site, 'guide_xbeach', ...
    'XBEACH — User Guide', '<p>Parameter tuning, grids, validation.</p>', site.pages);


% ---------- Site pages ----------
writeSimplePage(outDir, assets, site, 'site_delaware', ...
    'Delaware Coast', '<p>Describe locations, transects, and data sources.</p>', site.pages);


% ---------- Write Leaflet map (no toolboxes required) ----------
function writeLeafletMap(outDir_, assets_)
    % Build docs/map.html that reads docs/assets/geo/latest_run.geojson
    % and shows a popup with the plot image for each transect.

    % Ensure the geo folder exists
    geoDir = fullfile(outDir_, 'assets', 'geo');
    if ~exist(geoDir, 'dir'), mkdir(geoDir); end

    % Create the map page
    html = ['<!DOCTYPE html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">' ...
    '<title>Interactive Map</title>' ...
    '<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">' ...
    '<style>#map{height:100vh;margin:0} .popupimg{max-width:260px;display:block;margin-top:6px;border-radius:6px}</style>' ...
    '</head><body>' ...
    '<div id="map"></div>' ...
    '<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>' ...
    '<script>' ...
    'var map=L.map("map").setView([38.9,-75.2],8);' ...   % center over Delaware
    'L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{maxZoom:19}).addTo(map);' ...
    'fetch("assets/geo/latest_run.geojson").then(r=>{' ...
    '  if(!r.ok) throw new Error("no geojson");' ...
    '  return r.json();' ...
    '}).then(g=>{' ...
    '  L.geoJSON(g,{onEachFeature:function(f,l){' ...
    '    var p=f.properties||{};' ...
    '    var html="<strong>"+(p.name||"Transect")+"</strong>";' ...
    '    if(p.image){html+=`<br><img class="popupimg" src="${p.image}">`}' ...
    '    l.bindPopup(html);' ...
    '  }}).addTo(map);' ...
    '}).catch(e=>{' ...
    '  console.warn("No latest_run.geojson yet:", e);' ...
    '});' ...
    '</script></body></html>'];

    fid = fopen(fullfile(outDir_,'map.html'),'w'); fwrite(fid, html); fclose(fid);
end
e
